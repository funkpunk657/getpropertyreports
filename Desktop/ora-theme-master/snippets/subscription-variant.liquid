{% comment %}
to install, insert:
{% if product.available %}
	{% include 'subscription-product' %}
{% endif %}
above:
<form action="/cart/add">
	in product.liquid template
{% endcomment %}
<!-- subscription code begins -->
<script>
rechargedebug={}
	rechargedebug['subscription_active_metafield'] = '{{shop.metafields.subscriptions.subscription_active}}'
	subscription_on=false
</script>
{% if shop.metafields.subscriptions.subscription_active == 'true'  %}
	<script>
		subscription_on=true
		rechargedebug['subscription_on']=subscription_on
	</script>
{% endif %}
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
<script>
	rjQuery = jQuery.noConflict( true );
	
function get_cookie(name){
return(document.cookie.match('(^|; )'+name+'=([^;]*)')||0)[2]
}
		
	function getUrlParameter(desired_param) {
		var url = window.location.search.substring(1);
		var url_params = url.split('&');
		for (var i = 0; i < url_params.length; i++) {
			var param_name = url_params[i].split('=');
			if (param_name[0] == desired_param) {
				return param_name[1];
			}
		}
	}
	
	rechargedebug['previewactive']='not active'
	if ( getUrlParameter('recharge') =='true' || getUrlParameter('recharge') !=undefined ) {
		subscription_on=true
		rechargedebug['previewactive']='true'

if (get_cookie('recharge')!='true') {
	//show this preview the first time user comes to this page only
	alert('Hi! You are previewing recharge. You can clear your cookies to view as a normal shopper.')
rjQuery('.thisisapreview').show()
}
		document.cookie = "recharge=true; path=/"
}
</script>
{% if product.metafields.subscriptions.subscription_id  %}
	{% assign subscriptions = shop.metafields.subscriptions%}
	
	{% if subscriptions.font_color %} {% assign font_color = subscriptions.font_color %} {% else %} {% assign font_color = '#000' %} {% endif %}
	
	{% if subscriptions.background_color %} {% assign background_color = subscriptions.background_color %} {% else %} {% assign background_color = '#fff' %} {% endif %}
	
	{% if subscriptions.onetime_message %} {% assign widget_onetime_message = subscriptions.onetime_message %} {% else %} {% assign widget_onetime_message = 'One-time purchase	' %} {% endif %}
	{% if subscriptions.subscribe_message %} {% assign widget_subscribe_message = subscriptions.subscribe_message %} {% else %} {% assign widget_subscribe_message = 'Subscribe & Save' %} {% endif %}
	{% assign widget_how_it_works = subscriptions.how_it_works %}
	<script>
		{% if product.metafields.subscriptions.is_subscription_only == 'true' or product.tags contains 'Subscription Only' or product.tags contains 'subscription only' or product.tags contains 'Subscription only' or product.tags contains 'subscriptiononly' %}
				{% assign subscription_only = 'true' %}
				subscription_only_{{product.id}}{{count_suffix}}=true
				rechargedebug['subscription_only_{{product.id}}{{count_suffix}}']='true'
		{% else %}
				{% assign subscription_only = 'false' %}
				subscription_only_{{product.id}}{{count_suffix}}=false
				rechargedebug['subscription_only_{{product.id}}{{count_suffix}}']='false'
		{% endif %}
	
	</script>
	{% if product.metafields.subscriptions.shipping_interval_unit_type.size > 0%}
		{% assign shipping_interval_unit_type = product.metafields.subscriptions.shipping_interval_unit_type %}
	{% else %}
		{% assign shipping_interval_unit_type = 'Days' %}
	{% endif %}
	{% if product.metafields.subscriptions.shipping_interval_frequency.size > 0 %}
		{% assign shipping_interval_frequency = product.metafields.subscriptions.shipping_interval_frequency | split: ',' %}
	{% else %}
		{% assign shipping_interval_frequency = '30' %}
	{% endif %}
	
	{% assign discount_percentage = product.metafields.subscriptions.discount_percentage | floor %}
	{% assign subscription_id = product.metafields.subscriptions.subscription_id %}
	
	<input id="subscription_id_{{product.id}}{{count_suffix}}" name="" id="" value="{{subscription_id}}" class="hide-info"/>
	<section id="recurring_choice_{{product.id}}{{count_suffix}}" style="display:none">
		
		<div class="radio_option {{product.id}}{{count_suffix}} purchase-container" id="single_purchase_{{product.id}}{{count_suffix}}">
			<label for="autodeliver_off_radio_{{product.id}}{{count_suffix}}" id="auto_deliver_label" class="subscription-font-color">
				<input type="radio" name="autodeliver_{{product.id}}{{count_suffix}}" class="autodeliver {{product.id}}{{count_suffix}}" value="onetime" {% if subscription_only == 'false' %} checked="" {% endif %} id="autodeliver_off_radio_{{product.id}}{{count_suffix}}">
				{% if discount_percentage > 0 %}
					<span>{{widget_onetime_message }} </span> <span id="one-time-price_{{product.id}}{{count_suffix}}"></span>
				{% else %}
					<span>{{widget_onetime_message }} </span>
				{% endif %}
			</label>
			</div><!--#single_purchase-->
			<div class="radio_option {{product.id}}{{count_suffix}} purchase-container" id="recurring_purchase_{{product.id}}{{count_suffix}}">
				<label for="autodeliver_on_radio_{{product.id}}{{count_suffix}}" id="auto_deliver_label" class="purchase-container" style="font-weight:bold;">
					
					<input type="radio" name="autodeliver_{{product.id}}{{count_suffix}}" class="autodeliver {{product.id}}{{count_suffix}}" value="autodeliver" {% if subscription_only == 'true' %} checked="" {% endif %} id="autodeliver_on_radio_{{product.id}}{{count_suffix}}">
					<span class="subscription-font-color"> {{widget_subscribe_message}}</span>
					{% if discount_percentage > 0 %}
						<!-- Show discount percentage / discount amount -->
						<!-- <script>console.log("{{product.price | times: discount_percentage | divided_by: 100 | plus: 1 | money }}")</script> -->
						<span><strong>{{product.price | times: discount_percentage | divided_by: 100 | plus: 1 | money }}!</strong></span>
						<span id="recurring-time-price_{{product.id}}{{count_suffix}}"></span>
					{% endif %}
				</label>
				
				<div class="offer_newline">
					<label>
						<span class="subscription-font-color" style="margin-left:0px;">
							
							<input type="hidden" name="" id="shipping_interval_unit_type_{{product.id}}{{count_suffix}}" value="{{shipping_interval_unit_type}}" >
							Deliver every:
							{% if shipping_interval_frequency.size == 1 %}
								<span >
									{{shipping_interval_frequency[0]}}
									<!-- Display "1 Month" not "1 Months" -->
									{% if shipping_interval_frequency[0] == "1" and shipping_interval_unit_type == 'Months' %}
										Month
										{% elsif shipping_interval_frequency[0] == "1" and shipping_interval_unit_type == 'Weeks' %}
										Week
									{% else %}
										{{shipping_interval_unit_type}}
									{% endif %}
								</span>
								<input type="hidden" name="" id="shipping_interval_frequency_{{product.id}}{{count_suffix}}" value="{{shipping_interval_frequency}}">
								{%elsif shipping_interval_frequency.size > 1%}
								<select name="" id="shipping_interval_frequency_{{product.id}}{{count_suffix}}">
									{% for frequency in shipping_interval_frequency %}
										<option value="{{frequency}}">
											{{frequency}}
											<!-- Display "1 Month" not "1 Months" -->
											{% if frequency == "1" and shipping_interval_unit_type == 'Months' %}
												Month
												{% elsif frequency == "1" and shipping_interval_unit_type == 'Weeks' %}
												Week
											{% else %}
												{{shipping_interval_unit_type}}
											{% endif %}
										</option>
									{% endfor %}
								</select>
							{% endif %}
						</span>
					</label>
					<br />
					<!-- TOOLTIP - SEE DETAILS -->
					<a class="subscription-tooltip subscription-font-color" href="" onclick="return false;" id="see-details" style="margin-left:0px;text-transform:none;">See details
						<span class="subscription-font-color">
							{% if widget_how_it_works %}
								{{ widget_how_it_works }}
							{% else %}
								<strong>Here's How It Works:</strong>
								<br>- Your favorite products automatically delivered on your schedule<br>
								<br>- No obligation, modify or cancel anytime
							{% endif %}
						</span>
					</a>
					<!-- END TOOLTIP - SEE DETAILS -->
					<br />
					<!-- TOOLTIP - NO INTERNATIONAL SHIPPING -->
					<p id="shipping-tooltip_{{product.id}}{{count_suffix}}" class="shipping-tip">[US ONLY]</p>
					<!-- END TOOLTIP - NO INTERNATIONAL SHIPPING -->
					</div><!--.offer_newline-->
					</div><!--#recurring_purchase-->
				</section>
				<script>
				//regular mixed case with subscription and one time
				if (subscription_on==true && subscription_only_{{product.id}}{{count_suffix}}!=true) {
				rjQuery('#recurring_choice_{{product.id}}{{count_suffix}}').show()
				rechargedebug['showinghtml']='true'
				//only show html if subscription is On and subscription only if Off
				}
				//case for subscription only with shipping interval frequency dropdown
				var multiple_frequency_options_{{product.id}}{{count_suffix}}=false
				{% if shipping_interval_frequency.size > 1 %}
					var multiple_frequency_options_{{product.id}}{{count_suffix}}=true
				{% endif %}
				if (subscription_on==true && subscription_only_{{product.id}}{{count_suffix}}==true && multiple_frequency_options_{{product.id}}{{count_suffix}}) {
				rjQuery('#recurring_choice_{{product.id}}{{count_suffix}}').show()
				rechargedebug['showinghtml']='true'
				rjQuery('#single_purchase_{{product.id}}{{count_suffix}}').hide()
				rjQuery('#recurring_purchase_{{product.id}}{{count_suffix}} label').eq(0).hide()
				
				//only show html if subscription is On and subscription only if Off
				}
				</script>
				
				<style>
				#recurring_choice_{{product.id}}{{count_suffix}}{
						margin: 10px 0;
					}
					/* Tool Tip CSS */
					a.subscription-tooltip {
						outline:none;
						position:relative !important;
					}
					a.subscription-tooltip strong {line-height:30px;}
					a.subscription-tooltip:hover {text-decoration:none;}
					a.subscription-tooltip span {
						z-index:200;
						display:none;
						padding:14px 20px;
						margin-top: 20px;
						margin-left:28px;
						width:240px;
						line-height:16px;
					}
					a.subscription-tooltip:hover span{
						display:inline;
						position:absolute;
						left:-250px;
						color:#111;
						border:1px solid lightgrey;
						background:white;
					
					}
					a.subscription-tooltip span{
						-moz-box-shadow: 1px 1px 2px lightgrey;
						-webkit-box-shadow: 1px 1px 2px lightgrey;
						box-shadow: 1px 1px 2px lightgrey;
					}
				
					@media (max-width: 468px) {
					a.subscription-tooltip:hover span {
					left: -120px;
				}
				}
				
				.shipping-tip {
				margin-left: 0px;
				margin-bottom: -25px;
				padding-top: 5px;
				text-transform: none;
				display: none;
				cursor: default;
				color: #52daa6;
				font-family: 'Josefin Sans', sans-serif;
				font-weight: bold;
				position: static;
				font-size: 18px;
				}
					
					/* Recurring Upsell Widget CSS */
					
					.subscription-font-color {
				color: {{font_color}} !important;
				}
				
					.radio_option {
						border-radius:4px;
						cursor:pointer;
						margin:0;
						padding:8px;
						font-family:"Arial","Helvetica",sans-serif;
						width:98%;
						border: 1px solid transparent;
					}
					
					.radio_option.active {
				border:1px solid transparent !important;
				background-color: transparent !important;
				}
				.radio_option input {
						margin:0 4px 0 0;
						padding:0 0 0 5px;
					}
					
					
					.radio_option input[type="number"] {
						width:40px;
					}
					#auto_deliver_label {
						font-weight:bold !important;
						width:90% !important;
					}
					.radio_option label {
						width:auto;
						font-weight:normal !important;
						position:relative;
						display:inline-block
					}
					.label_black_text {
						color:rgb(0,0,0);
						font-family:"Arial";
						font-weight:bold;
						margin-left:21px;
					}
					.offer_newline {
						margin-top:5px;
					}
					#see-details {
						color:rgb(86,148,82);
						text-decoration:underline;
						text-transform:none;
					opacity:1;
					}
					.ui-widget-content {
						font-family:Verdana,Arial,sans-serif;
						color: red !important;
					}
					#recurring_choice {
						width: 100%;
						margin-left: 0px;
						margin-top: 10px;
						margin-bottom: 10px;
						font-size:13px;
					}
					#single_purchase {
						margin-bottom:5px;
					}
					select#shipping_interval_frequency_{{product.id}}{{count_suffix}} {
						display:inline-block;
						height: auto;
					}
					.radio_option label {
						cursor:pointer;
					}
					
					/* fix for launchpad*/
					.autodeliver {
						-webkit-appearance:radio;
					}
					
					/*Client requested changes */
					#see-details {
						color:#f89c34;
					}
					.hide-info{
					display:none;
					}
					/* Recurring Upsell Widget HTML */
				</style>
				<script>
					/**BEGIN JAVASCRIPT **/
				if (subscription_on==true) {
				window.currency_symbol='$'
				window.currency_suffix=' USD'
				
				discount_percentage_metafield_value = {{ product.metafields.subscriptions.discount_percentage | floor }}
				has_discount_{{product.id}}{{count_suffix}} = false
				if(discount_percentage_metafield_value > 0) {
						has_discount_{{product.id}}{{count_suffix}} = true
					}
					
					/* for changing background color when a selection is clicked */
					rjQuery('body').on('click','.autodeliver.{{product.id}}{{count_suffix}}',function() {
						rjQuery('.radio_option.{{product.id}}{{count_suffix}}').removeClass('active')
						rjQuery(this).parent().parent().addClass('active')
						if( rjQuery(this).val()=='autodeliver' ) {
							rjQuery('#recurring_purchase_{{product.id}}{{count_suffix}}').addClass('active')
							rjQuery('#single_purchase_{{product.id}}{{count_suffix}}').removeClass('active')
						} else if( rjQuery(this).val()=='onetime' ) {
							rjQuery('#recurring_purchase_{{product.id}}{{count_suffix}}').removeClass('active')
							rjQuery('#single_purchase_{{product.id}}{{count_suffix}}').addClass('active')
						}
						if(has_discount_{{product.id}}{{count_suffix}} == true) {
							updatePrice_{{product.id}}{{count_suffix}}("UPDATE - Change radio");
						}
					})
					
					//HANDLE THE ADDING TO CART
					rjQuery( document ).ready(function() {
						// CREATE DUPLICATE SELECT WITH OPTIONS
					var myDiv = rjQuery('form[data-productid="{{product.id}}{{count_suffix}}"]');
						var discount_prices = discount_variants_array_for_select_{{product.id}}{{count_suffix}}; //discount price options
						//Create and append select list
					var discount_select_menu_html = rjQuery("<select id='discount-select-{{product.id}}{{count_suffix}}'></select>");
					myDiv.append(discount_select_menu_html);
					for (var i = 0; i < discount_prices.length; i++) {
						var option = rjQuery('<option></option>').val(discount_prices[i]).html(discount_prices[i])
						discount_select_menu_html.append(option);
					}
			// ADD IDENTIFIERS TO ORIGINAL AND DUPLICATE SELECT
			var discount_select_{{product.id}}{{count_suffix}} = rjQuery("#discount-select-{{product.id}}{{count_suffix}}")
			discount_select_{{product.id}}{{count_suffix}}.hide();
			
			var original_select_{{product.id}}{{count_suffix}} = rjQuery('#product-select{{ count_suffix }}')
					original_select_{{product.id}}{{count_suffix}}.addClass('original_select_{{product.id}}{{count_suffix}}')

			// Set value of discount select on page load
			var original_select_menu_value = original_select_{{product.id}}{{count_suffix}}.val();
					var discount_value_of_originally_selected_menu_value = variant_id_to_discount_id_map_{{product.id}}{{count_suffix}}[original_select_menu_value]['discount_variant_id'];
						discount_select_{{product.id}}{{count_suffix}}.val(discount_value_of_originally_selected_menu_value);

			// Using a timeout to wait for shopify to load select elements via javascript
			setTimeout(function(){
				
				// INITIALIZE LISTENER FOR WHEN VARIANT DROPDOWN IS CHANGED
				// console.log("getting selectmenu");
				$('form[data-productid="{{product.id}}{{count_suffix}}"] .single-option-selector').on('change', function(){
					
						var original_product_value = original_select_{{product.id}}{{count_suffix}}.val();
						var new_variant_id = variant_id_to_discount_id_map_{{product.id}}{{count_suffix}}[original_product_value]['discount_variant_id'];

						// console.log("new variant id = "+new_variant_id);

						discount_select_{{product.id}}{{count_suffix}}.val(new_variant_id);
					
						updatePrice_{{product.id}}{{count_suffix}}();
					
				})


				// LISTENER FOR WHEN RADIO OPTION FOR ONE-TIME/RECURRING IS CHECKED
				rjQuery(".autodeliver.{{product.id}}{{count_suffix}}").change(function(){
				
					/*IF AUTODELIVER IS SELECTED, WE SET OUR SELECT to name=id and take that attribute off the original select*/
					if (rjQuery(this).val() == 'autodeliver') {

						// set duplicate select to be submitted
						original_select_{{product.id}}{{count_suffix}}.attr('name','')
						discount_select_{{product.id}}{{count_suffix}}.attr('name','id')
						// console.log("subscription!!!");
						//set shipping interval + subscription id attributes to be submitted when form is submitted
						rjQuery("#shipping_interval_frequency_{{product.id}}{{count_suffix}}").attr('name','properties[shipping_interval_frequency]');
						rjQuery("#subscription_id_{{product.id}}{{count_suffix}}").attr('name','properties[subscription_id]');
						rjQuery("#shipping_interval_unit_type_{{product.id}}{{count_suffix}}").attr('name','properties[shipping_interval_unit_type]');
						rjQuery("#shipping-tooltip_{{product.id}}{{count_suffix}}").show();
						// Set the product price to Subscription price
						rjQuery("#product-form-{{product.id}}{{count_suffix}} .product-photo .price").html("{{ subscription_price | money }}");

					} else if (rjQuery(this).val() == 'onetime') {

						// set original select to be submitted
						original_select_{{product.id}}{{count_suffix}}.attr('name','id')
						discount_select_{{product.id}}{{count_suffix}}.attr('name','')
						
						// remove shipping interval + subscription id from form submission since we're not subscription
						rjQuery("#shipping_interval_frequency_{{product.id}}{{count_suffix}}").attr('name','');
						rjQuery("#subscription_id_{{product.id}}{{count_suffix}}").attr('name','');
						rjQuery("#shipping_interval_unit_type_{{product.id}}{{count_suffix}}").attr('name','');
						rjQuery("#shipping-tooltip_{{product.id}}{{count_suffix}}").hide();
						// Set the product price to Standard price
						rjQuery("#product-form-{{product.id}}{{count_suffix}} .product-photo .price").html("{{ product.price | money }}");
					}
				});
			}, 800); 
			// end setTimeout / initialization of select menu listeners


			// IF SUBSCRIPTION ONLY, preset the subscription inputs
			{% if subscription_only == 'true' %}
							// set duplicate select to be submitted
							original_select_{{product.id}}{{count_suffix}}.attr('name','')
							discount_select_{{product.id}}{{count_suffix}}.attr('name','id')
							
							// set shipping interval + subscription id to be submitted
							rjQuery("#shipping_interval_frequency_{{product.id}}{{count_suffix}}").attr('name','properties[shipping_interval_frequency]');
							rjQuery("#subscription_id_{{product.id}}{{count_suffix}}").attr('name','properties[subscription_id]');
				rjQuery("#shipping_interval_unit_type_{{product.id}}{{count_suffix}}").attr('name','properties[shipping_interval_unit_type]');
							
			{% endif %}
			});
			
			
				/*** THIS PERFORMS PRICE UPDATE of primary price text above options***/
				function updatePrice_{{product.id}}{{count_suffix}}(debugging_text) {
					var price_selectors = '.current_price, #productPrice, .product-price, .price, #price-preview, .actual-price'
					
					//check for quickbuy and adjust selectors if needed
					if ( rjQuery(price_selectors).size() > 1 ) {
						var has_quickbuy = true
						//the quickbuy price selectors
						price_selectors = '.current_price.{{product.id}}{{count_suffix}}, #productPrice.{{product.id}}{{count_suffix}}, .product-price.{{product.id}}{{count_suffix}}, .price.{{product.id}}{{count_suffix}}, #price-preview.{{product.id}}{{count_suffix}}'
					}
					
					rjQuery(price_selectors).html(''); //blank out the current price
					var variant_id = rjQuery('.original_select_{{product.id}}{{count_suffix}}').val()
					var quantity = rjQuery('form[data-productid="{{product.id}}{{count_suffix}}"] [name="quantity"]').val()
				
					if(typeof quantity === 'undefined'){
						//some sites don't define quantity in the form so we need this as a backup
						quantity = 1;
					}
			
			//         console.log("variant id = " + variant_id);
			//         console.log("variant quantity = " + quantity);
			//         console.log("variant price map = " + variant_price_to_discount_price_map_{{product.id}}{{count_suffix}}[variant_id]);
					
					variant_price_{{product.id}}{{count_suffix}} = (variant_id_to_price_map_{{product.id}}{{count_suffix}}[variant_id] / 100)
					
					//if recurring is on, set
					if( rjQuery('#autodeliver_on_radio_{{product.id}}{{count_suffix}}').prop('checked')==true && variant_id_to_discount_id_map_{{product.id}}{{count_suffix}}[variant_id]['discount_variant_id'] !='') {
						variant_price_{{product.id}}{{count_suffix}} = variant_price_to_discount_price_map_{{product.id}}{{count_suffix}}[variant_id]['discount_variant_price']
					}
			
			//         console.log("variant price = " + variant_price_{{product.id}}{{count_suffix}});
					variant_price_{{product.id}}{{count_suffix}} = parseFloat(variant_price_{{product.id}}{{count_suffix}}).toFixed(2)
					var displayed_price = parseFloat(quantity * variant_price_{{product.id}}{{count_suffix}}).toFixed(2)
					var price_string = currency_symbol+' '+displayed_price + currency_suffix
				
					if(window.first_time_{{product.id}}{{count_suffix}}){
						rjQuery(price_selectors).html(price_string)
					}
					window.first_time_{{product.id}}{{count_suffix}} = true;
					updateInlinePrice_{{product.id}}{{count_suffix}}()
				}
				// This function updates the inline prices (next to radio buttons)
				function updateInlinePrice_{{product.id}}{{count_suffix}}() {

					var variant_id = rjQuery('.original_select_{{product.id}}{{count_suffix}}').val();
					var price_one_time = (variant_id_to_price_map_{{product.id}}{{count_suffix}}[variant_id] / 100);
					price_one_time = parseFloat(price_one_time).toFixed(2);

					// console.log("Product + Count = {{product.id}}{{count_suffix}}");
					// console.log("Variant ID = "+variant_id);
			
					var price_recurring = variant_price_to_discount_price_map_{{product.id}}{{count_suffix}}[variant_id]['discount_variant_price']
					price_recurring = parseFloat(price_recurring).toFixed(2);
					
					var price_one_time_parents = rjQuery('#one-time-price_{{product.id}}{{count_suffix}}').parents('.active');
					
					if (!price_one_time_parents.hasClass("active")) {
					rjQuery('#product-price_{{product.id}}{{count_suffix}}').text(" "+currency_symbol + price_recurring);
					} else {
					rjQuery('#product-price_{{product.id}}{{count_suffix}}').text(" "+currency_symbol+ price_one_time);
					}
					
					// rjQuery('#recurring-time-price_{{product.id}}{{count_suffix}}').text(" "+currency_symbol + price_recurring);
					// rjQuery('#one-time-price_{{product.id}}{{count_suffix}}').text(" "+currency_symbol + price_one_time);
			
				}
				
				/** PRICE RELATED DOCUMENT READY **/
				rjQuery(document).ready(function(){
					
					/** make sure correct option has grey border **/
					window.lock_{{product.id}}{{count_suffix}} = false;
					window.first_time_{{product.id}}{{count_suffix}} = true;
					if(rjQuery('#autodeliver_on_radio_{{product.id}}{{count_suffix}}').prop('checked')==true ) {
						rjQuery('#recurring_purchase_{{product.id}}{{count_suffix}}').addClass('active');
					} else {
						rjQuery('#single_purchase_{{product.id}}{{count_suffix}}').addClass('active');
					}
					if(has_discount_{{product.id}}{{count_suffix}} == true) {
						// ====== COMMENTED THIS OUT FOR VARIANTS! ======== //
						// setTimeout(function(){ updatePrice_{{product.id}}{{count_suffix}}("") }, 800);
					}
					
					
					//if something modifies the price, we notice it and then change it back. but we use a timeout function to avoid an infinite loop
					rjQuery('.current_price, #productPrice, .product-price, .price, #price-preview').bind("DOMSubtreeModified",function(){
						if( window.lock_{{product.id}}{{count_suffix}} == false ) {
							window.lock_{{product.id}}{{count_suffix}} = true;
							if(has_discount_{{product.id}}{{count_suffix}} == true) {
								updatePrice_{{product.id}}{{count_suffix}}("UPDATE - DOMSubtreeModified");
							}
							setTimeout(function(){window.lock_{{product.id}}{{count_suffix}}=false}, 800);
						}
					});
					
					//handle change in quantity
					rjQuery('#quantity').on("change",function(){
						if(has_discount_{{product.id}}{{count_suffix}} == true) {
							updatePrice_{{product.id}}{{count_suffix}}("UPDATE - Qty change on");
						}
					});
					
									//run the price updater once page loads to reset it to what we need it to be
							updateInlinePrice_{{product.id}}{{count_suffix}}();
							
				})//end document ready
					
				/** set variant mapping for the case in which there is an automatically created duplicate product **/
				var variant_id_to_discount_id_map_{{product.id}}{{count_suffix}} = {};
				var variant_price_to_discount_price_map_{{product.id}}{{count_suffix}} ={}
				var discount_variants_array_for_select_{{product.id}}{{count_suffix}}=[]
				

				var discount_variant_id = '{{ variant.metafields.subscriptions.discount_variant_id }}'
				variant_id_to_discount_id_map_{{product.id}}{{count_suffix}}['{{variant.id}}']=''

				// console.log("discount_variant_title = {{ variant.title }}");
				// console.log("discount_variant_id = "+discount_variant_id);
				
				if(discount_variant_id) {
					variant_id_to_discount_id_map_{{product.id}}{{count_suffix}}['{{variant.id}}'] = {"discount_variant_id":discount_variant_id};
					discount_variants_array_for_select_{{product.id}}{{count_suffix}}.push(discount_variant_id)
				}
				
				var discount_variant_price = '{{ variant.metafields.subscriptions.discount_variant_price }}'
				variant_price_to_discount_price_map_{{product.id}}{{count_suffix}}['{{variant.id}}']=''

				// console.log("discount_variant_price = "+discount_variant_price);
				// console.log("===");
				
				if(discount_variant_price) {
					variant_price_to_discount_price_map_{{product.id}}{{count_suffix}}['{{variant.id}}'] = { "discount_variant_price": discount_variant_price }
				}
				
				//map original prices for updated price calculations
				variant_id_to_price_map_{{product.id}}{{count_suffix}}={}
						variant_id_to_price_map_{{product.id}}{{count_suffix}}['{{variant.id}}'] = "{{variant.price}}"
			}//end if (subscription_on==true) section
			
			// FUNCTION TO CHECK IF THE VARIANT SELECTED HAS TO SHOW THE SUBSCRIPTION OPTIONS
			function check_variant_name_{{ product.id }}(variant_name){
			    // VARIANT_NAME_WITH_SUBSCRIPTION HAS TO BE THE NAME OF THE VARIANT THAT 
			    // YOU WANT TO USE TO SHOW THE SUBSCRIPTION OPTIONS
			    if (variant_name !== "Standard"){
			    	$('#recurring_choice_{{ product.id }}').show();

			    } else {
			    	$('#recurring_choice_{{ product.id }}').hide();
			      	$('#autodeliver_off_radio_{{ product.id }}').click();
			    }
			}

			// THIS LINE HIDE THE ENTIRE RECHARGE WIDGET WHEN THE PAGE LOAD THE FIRST TIME
			$('#recurring_choice_{{ product.id }}').hide();

			// LISTENER TO KNOW WHEN THE VARIANT SELECTED CHANGE
			// REPLACE "VARIANT_SELECTOR_CLASS_OR_ID" FOR YOUR CLASS OR ID SELECTOR. This is usually: .single-option-selector
			setTimeout(function() {
				$('form[data-productid="{{ product.id }}"] .single-option-selector').on('change', function(){

					var variant_name = $(this).val();
			  	check_variant_name_{{ product.id }}(variant_name); 

		  	})         	
			}, 800)  

			// WHEN THE PAGE LOAD THIS CHECK IF THE VARIANT SELECTED HAS TO SHOW THE SUBSCRIPTION
			var variant_name_firsttime = $('form[data-productid="{{ product.id }}"] .single-option-selector').val()
			check_variant_name_{{ product.id }}(variant_name_firsttime);

			</script>
		{% endif %} {% comment %} Ends the if statement for if product.metafields.subscriptions.subscription_id {% endcomment %}
		<!-- subscription code ends -->